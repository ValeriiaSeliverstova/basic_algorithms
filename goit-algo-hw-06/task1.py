import timeit
import networkx as nx
import matplotlib.pyplot as plt

# Створення графа
G = nx.Graph()

# Станції метро для кожної лінії
red_line = [
    "Академмістечко", "Житомирська", "Святошин", "Нивки", "Берестейська", "Шулявська", 
    "Політехнічний інститут", "Вокзальна", "Університет", "Театральна", "Хрещатик", 
    "Арсенальна", "Дніпро", "Гідропарк", "Лівобережна", "Дарниця", "Чернігівська", "Лісова"
]

blue_line = [
    "Героїв Дніпра", "Мінська", "Оболонь", "Почайна", "Тараса Шевченка", "Контрактова площа", 
    "Поштова площа", "Майдан Незалежності", "Площа Льва Толстого", "Олімпійська", "Палац Україна", 
    "Либідська", "Деміївська", "Голосіївська", "Васильківська", "Виставковий центр", "Іподром", "Теремки"
]

green_line = [
    "Сирець", "Дорогожичі", "Лук'янівська", "Золоті ворота", "Палац спорту", "Кловська", "Печерська", 
    "Дружби народів", "Видубичі", "Славутич", "Осокорки", "Позняки", "Харківська", "Вирлиця", 
    "Бориспільська", "Червоний хутір"
]

# Додавання вузлів для кожної лінії метро
G.add_nodes_from(red_line)
G.add_nodes_from(blue_line)
G.add_nodes_from(green_line)

# Додавання ребер (зв'язків між станціями) для кожної лінії
G.add_edges_from([("Академмістечко", "Житомирська"), ("Житомирська", "Святошин"), ("Святошин", "Нивки"), 
                  ("Нивки", "Берестейська"), ("Берестейська", "Шулявська"), ("Шулявська", "Політехнічний інститут"),
                  ("Політехнічний інститут", "Вокзальна"), ("Вокзальна", "Університет"), ("Університет", "Театральна"),
                  ("Театральна", "Хрещатик"), ("Хрещатик", "Арсенальна"), ("Арсенальна", "Дніпро"), 
                  ("Дніпро", "Гідропарк"), ("Гідропарк", "Лівобережна"), ("Лівобережна", "Дарниця"),
                  ("Дарниця", "Чернігівська"), ("Чернігівська", "Лісова")])

G.add_edges_from([("Героїв Дніпра", "Мінська"), ("Мінська", "Оболонь"), ("Оболонь", "Почайна"),
                  ("Почайна", "Тараса Шевченка"), ("Тараса Шевченка", "Контрактова площа"), 
                  ("Контрактова площа", "Поштова площа"), ("Поштова площа", "Майдан Незалежності"),
                  ("Майдан Незалежності", "Площа Льва Толстого"), ("Площа Льва Толстого", "Олімпійська"),
                  ("Олімпійська", "Палац Україна"), ("Палац Україна", "Либідська"), ("Либідська", "Деміївська"),
                  ("Деміївська", "Голосіївська"), ("Голосіївська", "Васильківська"), 
                  ("Васильківська", "Виставковий центр"), ("Виставковий центр", "Іподром"), ("Іподром", "Теремки")])

G.add_edges_from([("Сирець", "Дорогожичі"), ("Дорогожичі", "Лук'янівська"), 
                  ("Лук'янівська", "Золоті ворота"), ("Золоті ворота", "Палац спорту"),
                  ("Палац спорту", "Кловська"), ("Кловська", "Печерська"), 
                  ("Печерська", "Дружби народів"), ("Дружби народів", "Видубичі"), 
                  ("Видубичі", "Славутич"), ("Славутич", "Осокорки"), 
                  ("Осокорки", "Позняки"), ("Позняки", "Харківська"), 
                  ("Харківська", "Вирлиця"), ("Вирлиця", "Бориспільська"), ("Бориспільська", "Червоний хутір")])

# Додавання пересадок
G.add_edges_from([("Хрещатик", "Майдан Незалежності"), ("Театральна", "Золоті ворота")])

# Використання spring layout для візуалізації
pos = nx.kamada_kawai_layout(G)

# Візуалізація графа з різними кольорами для кожної лінії
plt.figure(figsize=(12,12))
nx.draw(G, pos, with_labels=True, nodelist=red_line, node_color="red", edge_color="red", node_size=500, font_size=10)
nx.draw(G, pos, with_labels=True, nodelist=blue_line, node_color="blue", edge_color="blue", node_size=500, font_size=10)
nx.draw(G, pos, with_labels=True, nodelist=green_line, node_color="green", edge_color="green", node_size=500, font_size=10)
nx.draw(G, pos, with_labels=True, nodelist=["Хрещатик", "Майдан Незалежності", "Театральна", "Золоті ворота"], 
        node_color="yellow", edge_color="yellow", node_size=500, font_size=10)  # Колір для пересадок
plt.show()

# Кількість вершин
num_nodes = G.number_of_nodes()

# Кількість ребер
num_edges = G.number_of_edges()


print(f"Кількість вершин: {num_nodes}")
print(f"Кількість ребер: {num_edges}")


"""
DFS (Пошук в глибину):
Шлях: DFS починає з "Червоного хутора" і йде по зеленій лінії через станції "Бориспільська", "Вирлиця" та інші. Він досліджує всю лінію до кінця, а потім повертається, щоб перевірити інші частини графа. Після цього переходить на інші лінії метро
DFS проходить максимально глибоко по одній гілці, перш ніж переходити до інших частин графа.
Час виконання: 0.00176 секунд

BFS (Пошук в ширину):
Шлях: BFS починає з "Червоного хутора" і спочатку обробляє всі сусідні станції, як-от "Бориспільська". Потім переходить до наступних станцій, що далі. BFS рівномірно охоплює всі станції, спочатку ближчі, а потім поступово переходить на інші лінії метро.
BFS проходить по ширині, рівномірно досліджуючи всі сусідні вузли одного рівня, перед тим як рухатися глибше.
Час виконання: 0.00169 секунд

Висновок:

DFS спочатку йде вглиб по одній лінії (зеленій), проходить її до кінця, а потім переходить на інші лінії. BFS спочатку досліджує всі ближні станції, починаючи з "Червоного хутора", і рівномірно проходить по всіх лініях. Обидва алгоритми працюють майже однаково за часом, бо граф має однакову кількість станцій і зв'язків, і це мало впливає на швидкість.

"""
